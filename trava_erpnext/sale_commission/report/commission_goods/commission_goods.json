{
 "add_total_row": 0,
 "columns": [
  {
   "fieldname": " item_name",
   "fieldtype": "Link",
   "label": "Item Name",
   "options": "Item",
   "width": 150
  },
  {
   "fieldname": "article_number",
   "fieldtype": "Data",
   "label": "Article number",
   "width": 100
  },
  {
   "fieldname": "stock_uom",
   "fieldtype": "Link",
   "label": "Unit of Measure",
   "options": "UOM",
   "width": 100
  },
  {
   "fieldname": "handed_qty",
   "fieldtype": "Data",
   "label": "Handed",
   "width": 100
  },
  {
   "fieldname": "sales_qty",
   "fieldtype": "Data",
   "label": "Sales qty",
   "width": 100
  },
  {
   "fieldname": "sales_amount",
   "fieldtype": "Data",
   "label": "Sales amount",
   "width": 100
  },
  {
   "fieldname": "return_qty",
   "fieldtype": "Data",
   "label": "Return",
   "width": 100
  },
  {
   "fieldname": "remainder_qty",
   "fieldtype": "Check",
   "label": "Remainder",
   "width": 0
  }
 ],
 "creation": "2020-12-21 19:48:44.901270",
 "disable_prepared_report": 0,
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [
  {
   "fieldname": "on_date",
   "fieldtype": "Date",
   "label": "On date",
   "mandatory": 0,
   "options": "Today",
   "wildcard_filter": 1
  }
 ],
 "idx": 0,
 "is_standard": "Yes",
 "modified": "2020-12-22 21:10:02.036904",
 "modified_by": "Administrator",
 "module": "Sale Commission",
 "name": "Commission Goods",
 "owner": "Administrator",
 "prepared_report": 0,
 "ref_doctype": "Commission Agent Report",
 "report_name": "Commission Goods",
 "report_script": "from __future__ import unicode_literals\nimport frappe\nfrom frappe import _, scrub\nfrom frappe.utils import getdate, flt, add_to_date, add_days\nfrom six import iteritems\nfrom erpnext.accounts.utils import get_fiscal_year\n\n\ndef execute(filters=None):\n\treturn Analytics(filters).run()\n\nclass Analytics(object):\n\tdef __init__(self, filters=None):\n\t\tprint('filters:', filters)\n\t\tself.filters = frappe._dict(filters or {})\n\t\tself.date_field = 'transaction_date' \\\n\t\t\tif self.filters.doc_type in ['Sales Order', 'Purchase Order'] else 'posting_date'\n\t\tself.months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\t\tself.get_period_date_ranges()\n\n\tdef run(self):\n\t\tprint('RUN')\n\t\tself.get_columns()\n\t\tself.get_data()\n\t\tself.get_chart_data()\n\n\t\t# Skipping total row for tree-view reports\n\t\tskip_total_row = 0\n\n\t\tif self.filters.tree_type in [\"Supplier Group\", \"Item Group\", \"Customer Group\", \"Territory\"]:\n\t\t\tskip_total_row = 1\n\n\t\treturn self.columns, self.data, None, self.chart, None, skip_total_row\n\n\tdef get_columns(self):\n\t\tself.columns = [{\n\t\t\t\t\"label\": _(self.filters.tree_type),\n\t\t\t\t\"options\": self.filters.tree_type if self.filters.tree_type != \"Order Type\" else \"\",\n\t\t\t\t\"fieldname\": \"entity\",\n\t\t\t\t\"fieldtype\": \"Link\" if self.filters.tree_type != \"Order Type\" else \"Data\",\n\t\t\t\t\"width\": 140 if self.filters.tree_type != \"Order Type\" else 200\n\t\t\t}]\n\t\tif self.filters.tree_type in [\"Customer\", \"Supplier\", \"Item\"]:\n\t\t\tself.columns.append({\n\t\t\t\t\"label\": _(self.filters.tree_type + \" Name\"),\n\t\t\t\t\"fieldname\": \"entity_name\",\n\t\t\t\t\"fieldtype\": \"Data\",\n\t\t\t\t\"width\": 140\n\t\t\t})\n\n\t\tif self.filters.tree_type == \"Item\":\n\t\t\tself.columns.append({\n\t\t\t\t\"label\": _(\"UOM\"),\n\t\t\t\t\"fieldname\": 'stock_uom',\n\t\t\t\t\"fieldtype\": \"Link\",\n\t\t\t\t\"options\": \"UOM\",\n\t\t\t\t\"width\": 100\n\t\t\t})\n\n\t\tfor end_date in self.periodic_daterange:\n\t\t\tperiod = self.get_period(end_date)\n\t\t\tself.columns.append({\n\t\t\t\t\"label\": _(period),\n\t\t\t\t\"fieldname\": scrub(period),\n\t\t\t\t\"fieldtype\": \"Float\",\n\t\t\t\t\"width\": 120\n\t\t\t})\n\n\t\tself.columns.append({\n\t\t\t\"label\": _(\"Total\"),\n\t\t\t\"fieldname\": \"total\",\n\t\t\t\"fieldtype\": \"Float\",\n\t\t\t\"width\": 120\n\t\t})\n\n\tdef get_data(self):\n\t\tif self.filters.tree_type in [\"Customer\", \"Supplier\"]:\n\t\t\tself.get_sales_transactions_based_on_customers_or_suppliers()\n\t\t\tself.get_rows()\n\n\t\telif self.filters.tree_type == 'Item':\n\t\t\tself.get_sales_transactions_based_on_items()\n\t\t\tself.get_rows()\n\n\t\telif self.filters.tree_type in [\"Customer Group\", \"Supplier Group\", \"Territory\"]:\n\t\t\tself.get_sales_transactions_based_on_customer_or_territory_group()\n\t\t\tself.get_rows_by_group()\n\n\t\telif self.filters.tree_type == 'Item Group':\n\t\t\tself.get_sales_transactions_based_on_item_group()\n\t\t\tself.get_rows_by_group()\n\n\t\telif self.filters.tree_type == \"Order Type\":\n\t\t\tif self.filters.doc_type != \"Sales Order\":\n\t\t\t\tself.data = []\n\t\t\t\treturn\n\t\t\tself.get_sales_transactions_based_on_order_type()\n\t\t\tself.get_rows_by_group()\n\n\t\telif self.filters.tree_type == \"Project\":\n\t\t\tself.get_sales_transactions_based_on_project()\n\t\t\tself.get_rows()\n\n\tdef get_sales_transactions_based_on_order_type(self):\n\t\tif self.filters[\"value_quantity\"] == 'Value':\n\t\t\tvalue_field = \"base_net_total\"\n\t\telse:\n\t\t\tvalue_field = \"total_qty\"\n\n\t\tself.entries = frappe.db.sql(\"\"\" select s.order_type as entity, s.{value_field} as value_field, s.{date_field}\n\t\t\tfrom `tab{doctype}` s where s.docstatus = 1 and s.company = %s and s.{date_field} between %s and %s\n\t\t\tand ifnull(s.order_type, '') != '' order by s.order_type\n\t\t\"\"\"\n\t\t.format(date_field=self.date_field, value_field=value_field, doctype=self.filters.doc_type),\n\t\t(self.filters.company, self.filters.from_date, self.filters.to_date), as_dict=1)\n\n\t\tself.get_teams()\n\n\tdef get_sales_transactions_based_on_customers_or_suppliers(self):\n\t\tif self.filters[\"value_quantity\"] == 'Value':\n\t\t\tvalue_field = \"base_net_total as value_field\"\n\t\telse:\n\t\t\tvalue_field = \"total_qty as value_field\"\n\n\t\tif self.filters.tree_type == 'Customer':\n\t\t\tentity = \"customer as entity\"\n\t\t\tentity_name = \"customer_name as entity_name\"\n\t\telse:\n\t\t\tentity = \"supplier as entity\"\n\t\t\tentity_name = \"supplier_name as entity_name\"\n\n\t\tself.entries = frappe.get_all(self.filters.doc_type,\n\t\t\tfields=[entity, entity_name, value_field, self.date_field],\n\t\t\tfilters={\n\t\t\t\t\"docstatus\": 1,\n\t\t\t\t\"company\": self.filters.company,\n\t\t\t\tself.date_field: ('between', [self.filters.from_date, self.filters.to_date])\n\t\t\t}\n\t\t)\n\n\t\tself.entity_names = {}\n\t\tfor d in self.entries:\n\t\t\tself.entity_names.setdefault(d.entity, d.entity_name)\n\n\tdef get_sales_transactions_based_on_items(self):\n\n\t\tif self.filters[\"value_quantity\"] == 'Value':\n\t\t\tvalue_field = 'base_amount'\n\t\telse:\n\t\t\tvalue_field = 'stock_qty'\n\n\t\tself.entries = frappe.db.sql(\"\"\"\n\t\t\tselect i.item_code as entity, i.item_name as entity_name, i.stock_uom, i.{value_field} as value_field, s.{date_field}\n\t\t\tfrom `tab{doctype} Item` i , `tab{doctype}` s\n\t\t\twhere s.name = i.parent and i.docstatus = 1 and s.company = %s\n\t\t\tand s.{date_field} between %s and %s\n\t\t\"\"\"\n\t\t.format(date_field=self.date_field, value_field=value_field, doctype=self.filters.doc_type),\n\t\t(self.filters.company, self.filters.from_date, self.filters.to_date), as_dict=1)\n\n\t\tself.entity_names = {}\n\t\tfor d in self.entries:\n\t\t\tself.entity_names.setdefault(d.entity, d.entity_name)\n\n\tdef get_sales_transactions_based_on_customer_or_territory_group(self):\n\t\tif self.filters[\"value_quantity\"] == 'Value':\n\t\t\tvalue_field = \"base_net_total as value_field\"\n\t\telse:\n\t\t\tvalue_field = \"total_qty as value_field\"\n\n\t\tif self.filters.tree_type == 'Customer Group':\n\t\t\tentity_field = 'customer_group as entity'\n\t\telif self.filters.tree_type == 'Supplier Group':\n\t\t\tentity_field = \"supplier as entity\"\n\t\t\tself.get_supplier_parent_child_map()\n\t\telse:\n\t\t\tentity_field = \"territory as entity\"\n\n\t\tself.entries = frappe.get_all(self.filters.doc_type,\n\t\t\tfields=[entity_field, value_field, self.date_field],\n\t\t\tfilters={\n\t\t\t\t\"docstatus\": 1,\n\t\t\t\t\"company\": self.filters.company,\n\t\t\t\tself.date_field: ('between', [self.filters.from_date, self.filters.to_date])\n\t\t\t}\n\t\t)\n\t\tself.get_groups()\n\n\tdef get_sales_transactions_based_on_item_group(self):\n\t\tif self.filters[\"value_quantity\"] == 'Value':\n\t\t\tvalue_field = \"base_amount\"\n\t\telse:\n\t\t\tvalue_field = \"qty\"\n\n\t\tself.entries = frappe.db.sql(\"\"\"\n\t\t\tselect i.item_group as entity, i.{value_field} as value_field, s.{date_field}\n\t\t\tfrom `tab{doctype} Item` i , `tab{doctype}` s\n\t\t\twhere s.name = i.parent and i.docstatus = 1 and s.company = %s\n\t\t\tand s.{date_field} between %s and %s\n\t\t\"\"\".format(date_field=self.date_field, value_field=value_field, doctype=self.filters.doc_type),\n\t\t(self.filters.company, self.filters.from_date, self.filters.to_date), as_dict=1)\n\n\t\tself.get_groups()\n\n\tdef get_sales_transactions_based_on_project(self):\n\t\tif self.filters[\"value_quantity\"] == 'Value':\n\t\t\tvalue_field = \"base_net_total as value_field\"\n\t\telse:\n\t\t\tvalue_field = \"total_qty as value_field\"\n\n\t\tentity = \"project as entity\"\n\n\t\tself.entries = frappe.get_all(self.filters.doc_type,\n\t\t\tfields=[entity, value_field, self.date_field],\n\t\t\tfilters={\n\t\t\t\t\"docstatus\": 1,\n\t\t\t\t\"company\": self.filters.company,\n\t\t\t\t\"project\": [\"!=\", \"\"],\n\t\t\t\tself.date_field: ('between', [self.filters.from_date, self.filters.to_date])\n\t\t\t}\n\t\t)\n\n\tdef get_rows(self):\n\t\tself.data = []\n\t\tself.get_periodic_data()\n\n\t\tfor entity, period_data in iteritems(self.entity_periodic_data):\n\t\t\trow = {\n\t\t\t\t\"entity\": entity,\n\t\t\t\t\"entity_name\": self.entity_names.get(entity) if hasattr(self, 'entity_names') else None\n\t\t\t}\n\t\t\ttotal = 0\n\t\t\tfor end_date in self.periodic_daterange:\n\t\t\t\tperiod = self.get_period(end_date)\n\t\t\t\tamount = flt(period_data.get(period, 0.0))\n\t\t\t\trow[scrub(period)] = amount\n\t\t\t\ttotal += amount\n\n\t\t\trow[\"total\"] = total\n\n\t\t\tif self.filters.tree_type == \"Item\":\n\t\t\t\trow[\"stock_uom\"] = period_data.get(\"stock_uom\")\n\n\t\t\tself.data.append(row)\n\n\tdef get_rows_by_group(self):\n\t\tself.get_periodic_data()\n\t\tout = []\n\n\t\tfor d in reversed(self.group_entries):\n\t\t\trow = {\n\t\t\t\t\"entity\": d.name,\n\t\t\t\t\"indent\": self.depth_map.get(d.name)\n\t\t\t}\n\t\t\ttotal = 0\n\t\t\tfor end_date in self.periodic_daterange:\n\t\t\t\tperiod = self.get_period(end_date)\n\t\t\t\tamount = flt(self.entity_periodic_data.get(d.name, {}).get(period, 0.0))\n\t\t\t\trow[scrub(period)] = amount\n\t\t\t\tif d.parent and (self.filters.tree_type != \"Order Type\" or d.parent == \"Order Types\"):\n\t\t\t\t\tself.entity_periodic_data.setdefault(d.parent, frappe._dict()).setdefault(period, 0.0)\n\t\t\t\t\tself.entity_periodic_data[d.parent][period] += amount\n\t\t\t\ttotal += amount\n\n\t\t\trow[\"total\"] = total\n\t\t\tout = [row] + out\n\n\t\tself.data = out\n\n\tdef get_periodic_data(self):\n\t\tself.entity_periodic_data = frappe._dict()\n\n\t\tfor d in self.entries:\n\t\t\tif self.filters.tree_type == \"Supplier Group\":\n\t\t\t\td.entity = self.parent_child_map.get(d.entity)\n\t\t\tperiod = self.get_period(d.get(self.date_field))\n\t\t\tself.entity_periodic_data.setdefault(d.entity, frappe._dict()).setdefault(period, 0.0)\n\t\t\tself.entity_periodic_data[d.entity][period] += flt(d.value_field)\n\n\t\t\tif self.filters.tree_type == \"Item\":\n\t\t\t\tself.entity_periodic_data[d.entity]['stock_uom'] = d.stock_uom\n\n\tdef get_period(self, posting_date):\n\t\tif self.filters.range == 'Weekly':\n\t\t\tperiod = \"Week \" + str(posting_date.isocalendar()[1]) + \" \" + str(posting_date.year)\n\t\telif self.filters.range == 'Monthly':\n\t\t\tperiod = str(self.months[posting_date.month - 1]) + \" \" + str(posting_date.year)\n\t\telif self.filters.range == 'Quarterly':\n\t\t\tperiod = \"Quarter \" + str(((posting_date.month - 1) // 3) + 1) + \" \" + str(posting_date.year)\n\t\telse:\n\t\t\tyear = get_fiscal_year(posting_date, company=self.filters.company)\n\t\t\tperiod = str(year[0])\n\t\treturn period\n\n\tdef get_period_date_ranges(self):\n\t\tfrom dateutil.relativedelta import relativedelta, MO\n\t\tfrom_date, to_date = getdate(self.filters.from_date), getdate(self.filters.to_date)\n\n\t\tincrement = {\n\t\t\t\"Monthly\": 1,\n\t\t\t\"Quarterly\": 3,\n\t\t\t\"Half-Yearly\": 6,\n\t\t\t\"Yearly\": 12\n\t\t}.get(self.filters.range, 1)\n\n\t\tif self.filters.range in ['Monthly', 'Quarterly']:\n\t\t\tfrom_date = from_date.replace(day=1)\n\t\telif self.filters.range == \"Yearly\":\n\t\t\tfrom_date = get_fiscal_year(from_date)[1]\n\t\telse:\n\t\t\tfrom_date = from_date + relativedelta(from_date, weekday=MO(-1))\n\n\t\tself.periodic_daterange = []\n\t\tfor dummy in range(1, 53):\n\t\t\tif self.filters.range == \"Weekly\":\n\t\t\t\tperiod_end_date = add_days(from_date, 6)\n\t\t\telse:\n\t\t\t\tperiod_end_date = add_to_date(from_date, months=increment, days=-1)\n\n\t\t\tif period_end_date > to_date:\n\t\t\t\tperiod_end_date = to_date\n\n\t\t\tself.periodic_daterange.append(period_end_date)\n\n\t\t\tfrom_date = add_days(period_end_date, 1)\n\t\t\tif period_end_date == to_date:\n\t\t\t\tbreak\n\n\tdef get_groups(self):\n\t\tif self.filters.tree_type == \"Territory\":\n\t\t\tparent = 'parent_territory'\n\t\tif self.filters.tree_type == \"Customer Group\":\n\t\t\tparent = 'parent_customer_group'\n\t\tif self.filters.tree_type == \"Item Group\":\n\t\t\tparent = 'parent_item_group'\n\t\tif self.filters.tree_type == \"Supplier Group\":\n\t\t\tparent = 'parent_supplier_group'\n\n\t\tself.depth_map = frappe._dict()\n\n\t\tself.group_entries = frappe.db.sql(\"\"\"select name, lft, rgt , {parent} as parent\n\t\t\tfrom `tab{tree}` order by lft\"\"\"\n\t\t.format(tree=self.filters.tree_type, parent=parent), as_dict=1)\n\n\t\tfor d in self.group_entries:\n\t\t\tif d.parent:\n\t\t\t\tself.depth_map.setdefault(d.name, self.depth_map.get(d.parent) + 1)\n\t\t\telse:\n\t\t\t\tself.depth_map.setdefault(d.name, 0)\n\n\tdef get_teams(self):\n\t\tself.depth_map = frappe._dict()\n\n\t\tself.group_entries = frappe.db.sql(\"\"\" select * from (select \"Order Types\" as name, 0 as lft,\n\t\t\t2 as rgt, '' as parent union select distinct order_type as name, 1 as lft, 1 as rgt, \"Order Types\" as parent\n\t\t\tfrom `tab{doctype}` where ifnull(order_type, '') != '') as b order by lft, name\n\t\t\"\"\"\n\t\t.format(doctype=self.filters.doc_type), as_dict=1)\n\n\t\tfor d in self.group_entries:\n\t\t\tif d.parent:\n\t\t\t\tself.depth_map.setdefault(d.name, self.depth_map.get(d.parent) + 1)\n\t\t\telse:\n\t\t\t\tself.depth_map.setdefault(d.name, 0)\n\n\tdef get_supplier_parent_child_map(self):\n\t\tself.parent_child_map = frappe._dict(frappe.db.sql(\"\"\" select name, supplier_group from `tabSupplier`\"\"\"))\n\n\tdef get_chart_data(self):\n\t\tlength = len(self.columns)\n\n\t\tif self.filters.tree_type in [\"Customer\", \"Supplier\"]:\n\t\t\tlabels = [d.get(\"label\") for d in self.columns[2:length - 1]]\n\t\telif self.filters.tree_type == \"Item\":\n\t\t\tlabels = [d.get(\"label\") for d in self.columns[3:length - 1]]\n\t\telse:\n\t\t\tlabels = [d.get(\"label\") for d in self.columns[1:length - 1]]\n\t\tself.chart = {\n\t\t\t\"data\": {\n\t\t\t\t'labels': labels,\n\t\t\t\t'datasets': []\n\t\t\t},\n\t\t\t\"type\": \"line\"\n\t\t}",
 "report_type": "Script Report",
 "roles": [
  {
   "role": "Sales User"
  },
  {
   "role": "Sales Manager"
  },
  {
   "role": "Maintenance User"
  },
  {
   "role": "Accounts User"
  },
  {
   "role": "Stock User"
  }
 ]
}